knitr::opts_chunk$set(echo = TRUE)
set.seed(29003021)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
set.seed(29003021)
library(tidyverse)
f <- function(x){
0.5 * exp(-abs(x))
}
unif_chain <- function(sigma, x0, B = 5000) {
chain <- numeric(B); chain[1] <- x0 ; rejects <- 0
for (i in 2:B) {
candidate <- chain[i - 1] + rnorm(1, 0, sigma)
ratio <- f(candidate) / f(chain[i - 1])
if (runif(1) <= ratio) {
chain[i] <- candidate
} else {
chain[i] <- chain[i - 1]
rejects <- rejects + 1
}
}
list(reject_rate = rejects / B, chain = chain)
}
laplace_0.25_0 <- unif_chain(0.25, 0)
laplace_0.25_1 <- unif_chain(0.25, 1)
laplace_0.25_10 <- unif_chain(0.25, 10)
laplace_1_0 <- unif_chain(1, 0)
laplace_1_1 <- unif_chain(1, 1)
laplace_1_10 <- unif_chain(1, 10)
laplace_2_0 <- unif_chain(2, 0)
laplace_2_1 <- unif_chain(2, 1)
laplace_2_10 <- unif_chain(2, 10)
par(mar = c(4, 4, 2,2))
k <-1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace_0.25_0$chain, laplace_1_0$chain, laplace_2_0$chain)))
rs <- rainbow(3)
lines(1:k, laplace_0.25_0$chain[1:k], col = rs[1])
lines(1:k, laplace_1_0$chain[1:k], col = rs[2])
lines(1:k, laplace_2_0$chain[1:k], col = rs[3])
legend("bottomright", legend = c(0.25, 1, 2), fill = rs)
par(mar = c(4, 4, 2,2))
k <-1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace_0.25_1$chain, laplace_1_1$chain, laplace_2_1$chain)))
rs <- rainbow(3)
lines(1:k, laplace_0.25_1$chain[1:k], col = rs[1])
lines(1:k, laplace_1_1$chain[1:k], col = rs[2])
lines(1:k, laplace_2_1$chain[1:k], col = rs[3])
legend("bottomright", legend = c(0.25, 1, 2), fill = rs)
par(mar = c(4, 4, 2,2))
k <-1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace_0.25_10$chain, laplace_1_10$chain, laplace_2_10$chain)))
rs <- rainbow(3)
lines(1:k, laplace_0.25_10$chain[1:k], col = rs[1])
lines(1:k, laplace_1_10$chain[1:k], col = rs[2])
lines(1:k, laplace_2_10$chain[1:k], col = rs[3])
legend("bottomright", legend = c(0.25, 1, 2), fill = rs)
laplace_0.25_0$reject_rate
laplace_0.25_1$reject_rate
laplace_0.25_10$reject_rate
laplace_1_0$reject_rate
laplace_1_1$reject_rate
laplace_1_10$reject_rate
laplace_2_0$reject_rate
laplace_2_1$reject_rate
laplace_2_10$reject_rate
###################################################
### code chunk number 1: lecture-core.Rnw:52-56
###################################################
options(width = 60, digits = 4)
set.seed(49482)
library(tidyverse)
library(ggplot2)
###################################################
### code chunk number 2: lecture-core.Rnw:134-137
###################################################
test_theta <- 0.8
test_score <- rbinom(1, size = 30, test_theta)
print(test_score)
###################################################
### code chunk number 3: lecture-core.Rnw:168-173
###################################################
par(mar = c(3,3,1,1))
curve(dbeta(x, 1, 1), xlim = c(0,1), ylim = c(0, 2.8))
curve(dbeta(x, 2, 1), xlim = c(0,1), add = TRUE, lty = 2, col = "red")
curve(dbeta(x, 5, 2), xlim = c(0,1), add = TRUE, lty = 3, col = "blue")
legend("topleft", lty = 1:3, col = c("black", "red", "blue"), legend = c("1,1", "2,1", "5,2"))
###################################################
### code chunk number 4: lecture-core.Rnw:216-220
###################################################
par(mar = c(3,3,1,1))
curve(dbeta(x, 5 + test_score, 32 - test_score))
curve(dbeta(x, 5, 2), add =TRUE, lty = 2)
legend(x = "topleft", legend = c("Posterior given test scores", "Prior a = 5, b = 2"), lty = 1:2)
###################################################
### code chunk number 5: lecture-core.Rnw:226-227
###################################################
1 - pbeta(0.75, 5 + test_score, 32 - test_score)
###################################################
### code chunk number 6: lecture-core.Rnw:231-233
###################################################
1 - var(rbeta(1000, 5 + test_score, 32 - test_score)) /
var(rbeta(1000, 5, 2)) ## MC estimates of variance
###################################################
### code chunk number 7: lecture-core.Rnw:282-286
###################################################
rv1 <- cumsum(c(1, rnorm(9, mean = 0)))
curve(dnorm(x), xlim = range(c(-1, 1, rv1)))
lines(density(rv1), lty = 2)
text(y = 0.3, x = rv1, labels =  1:10)
###################################################
### code chunk number 8: lecture-core.Rnw:293-299
###################################################
par(mar = c(3, 3, 1, 1))
rv2 <- c(0, rnorm(200, mean = 0))
rvs <- c(rv1, rv2)
curve(dnorm(x), xlim = range(c(-1, 1, rvs)))
lines(density(rvs), lty = 2)
###################################################
### code chunk number 9: lecture-core.Rnw:306-310
###################################################
par(mar = c(3, 3, 1, 1))
curve(dnorm(x), xlim = range(c(-1, 1, rv2)))
lines(density(rv2), lty = 2)
###################################################
### code chunk number 10: lecture-core.Rnw:385-396
###################################################
# we'll fix sigma at 4
f <- function(x) {
(x / 16) * exp(-x^2 / 32)
}
B <- 10000
xs <- numeric(B)
xs[1] <- 2 # arbitrary starting point
# we'll log rejects
rejected <- logical(B)
rejected[1] <- FALSE
###################################################
### code chunk number 11: lecture-core.Rnw:401-402
###################################################
curve(f(x), xlim = c(0, 10))
###################################################
### code chunk number 12: lecture-core.Rnw:407-422
###################################################
# starting i = 2, apply MH
for (i in 2:B) {
x <- xs[i - 1]
xstar <- rchisq(1, df = x)
ratio <- f(xstar) * dchisq(x, df = xstar) /
(f(x) * dchisq(xstar, df = x))
u <- runif(1)
if (u <= ratio) {
xs[i] <- xstar
rejected[i] <- FALSE
} else {
xs[i] <- x
rejected[i] <- TRUE
}
}
###################################################
### code chunk number 13: lecture-core.Rnw:428-431
###################################################
par(mar = c(4,4,0,0))
k <- 20
plot(xs[1:k], type = 'b', col = c("black", "red")[1 + rejected], ylab = "X(t)", xlab = "t")
###################################################
### code chunk number 14: lecture-core.Rnw:438-440
###################################################
par(mar = c(4,4,0,0))
plot(xs, type = 'l', ylab = "X(t)", xlab = "t")
###################################################
### code chunk number 15: lecture-core.Rnw:454-456
###################################################
df <- data.frame(x_t = xs, burnin = c(rep("Yes", 200), rep("No", B - 200)))
ggplot(df, aes(x = x_t, fill = burnin)) + geom_density(alpha = 0.5) + stat_function(fun = f, lwd = 2)
###################################################
### code chunk number 16: lecture-core.Rnw:512-516
###################################################
pi_star <- function(theta) {
theta^(5 + test_score - 1) *
(1 - theta)^(32 - test_score - 1)
}
###################################################
### code chunk number 17: lecture-core.Rnw:521-536
###################################################
B <- 20000; chain <- numeric(B) ; chain[1] <- 0.5; rejects <- 0
for (i in 2:B) {
candidate <- ifelse(chain[i - 1] < 0.5,
runif(1, 0, 0.6),
runif(1, 0.4, 1))
ratio <- pi_star(candidate) * (5/3) /
(pi_star(chain[i - 1]) * (5/3))
if (runif(1) <= ratio) {
chain[i] <- candidate
} else {
chain[i] <- chain[i - 1]
rejects <- rejects + 1
}
}
reject_rate <- rejects / B
###################################################
### code chunk number 18: lecture-core.Rnw:541-542
###################################################
plot(chain, type = 'l')
###################################################
### code chunk number 19: lecture-core.Rnw:547-549
###################################################
plot(density(chain[2000:5000]))
curve(dbeta(x, 5 + test_score, 32 - test_score), add = TRUE, col = "red")
###################################################
### code chunk number 20: lecture-core.Rnw:578-590
###################################################
chain_ind <- numeric(B) ; chain_ind[1] <- 0.1 ; rejects_ind <- 0
for (i in 2:B) {
candidate <- runif(1)
ratio <- pi_star(candidate) / pi_star(chain_ind[i - 1])
if (runif(1) <= ratio) {
chain_ind[i] <- candidate
} else {
chain_ind[i] <- chain_ind[i - 1]
rejects_ind <- rejects_ind + 1
}
}
reject_rate_ind <- rejects_ind / B
###################################################
### code chunk number 21: lecture-core.Rnw:595-596
###################################################
plot(chain_ind, type = 'l')
###################################################
### code chunk number 22: lecture-core.Rnw:602-604
###################################################
plot(density(chain_ind[2000:B]))
curve(dbeta(x, 5 + test_score, 32 - test_score), add = TRUE, col = "red")
###################################################
### code chunk number 23: lecture-core.Rnw:623-625
###################################################
reject_rate
reject_rate_ind
###################################################
### code chunk number 24: lecture-core.Rnw:658-672
###################################################
unif_chain <- function(delta, B = 5000) {
chain <- numeric(B); chain[1] <- 0 ; rejects <- 0
for (i in 2:B) {
candidate <- chain[i - 1] + runif(1, -delta, delta)
ratio <- dnorm(candidate) / dnorm(chain[i - 1])
if (runif(1) <= ratio) {
chain[i] <- candidate
} else {
chain[i] <- chain[i - 1]
rejects <- rejects + 1
}
}
list(reject_rate = rejects / B, chain = chain)
}
###################################################
### code chunk number 25: lecture-core.Rnw:677-680
###################################################
n01_chain_0.1 <- unif_chain(0.1)
n01_chain_1 <- unif_chain(1)
n01_chain_10 <- unif_chain(10)
###################################################
### code chunk number 26: lecture-core.Rnw:685-693
###################################################
par(mar = c(4, 4, 2,2))
k <-1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(n01_chain_10$chain, n01_chain_1$chain, n01_chain_0.1$chain)))
rs <- rainbow(3)
lines(1:k, n01_chain_0.1$chain[1:k], col = rs[1])
lines(1:k, n01_chain_1$chain[1:k], col = rs[2])
lines(1:k, n01_chain_10$chain[1:k], col = rs[3])
legend("bottomright", legend = c(0.1, 1, 10), fill = rs)
dnorm(1)
f <- function(x){
1 / 2 * exp(-abs(x))
}
unif_chain <- function(sigma, s, B = 5000) {
chain <- numeric(B); chain[1] <- s ; rejects <- 0
for (i in 2:B) {
candidate <- chain[i - 1] + rnorm(1, 0, sigma)
ratio <- f(candidate) / f(chain[i - 1])
if (runif(1) <= ratio) {
chain[i] <- candidate
} else {
chain[i] <- chain[i - 1]
rejects <- rejects + 1
}
}
list(reject_rate = rejects / B, chain = chain)
}
laplace00 <- unif_chain(0.25, 0)
laplace01 <- unif_chain(0.25, 1)
laplace02 <- unif_chain(0.25, 10)
laplace10 <- unif_chain(1, 0)
laplace11 <- unif_chain(1, 1)
laplace12 <- unif_chain(1, 10)
laplace20 <- unif_chain(2, 0)
laplace21 <- unif_chain(2, 1)
laplace22 <- unif_chain(2, 10)
par(mar = c(4, 4, 2, 2))
k <- 1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace00$chain, laplace10$chain, laplace20$chain)))
rs <- rainbow(3)
lines(1:k, laplace20$chain[1:k], col = rs[1])
lines(1:k, laplace10$chain[1:k], col = rs[2])
lines(1:k, laplace00$chain[1:k], col = rs[3])
legend("bottomright", legend = c(2, 1, 0.25), fill = rs)
par(mar = c(4, 4, 2, 2))
k <- 1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace01$chain, laplace11$chain, laplace21$chain)))
rs <- rainbow(3)
lines(1:k, laplace21$chain[1:k], col = rs[1])
lines(1:k, laplace11$chain[1:k], col = rs[2])
lines(1:k, laplace01$chain[1:k], col = rs[3])
legend("bottomright", legend = c(2, 1, 0.25), fill = rs)
###################################################
### code chunk number 26: lecture-core.Rnw:685-693
###################################################
par(mar = c(4, 4, 2,2))
k <-1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(n01_chain_10$chain, n01_chain_1$chain, n01_chain_0.1$chain)))
rs <- rainbow(3)
lines(1:k, n01_chain_0.1$chain[1:k], col = rs[1])
lines(1:k, n01_chain_1$chain[1:k], col = rs[2])
lines(1:k, n01_chain_10$chain[1:k], col = rs[3])
legend("bottomright", legend = c(0.1, 1, 10), fill = rs)
par(mar = c(4, 4, 2, 2))
k <- 1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace02$chain, laplace12$chain, laplace22$chain)))
rs <- rainbow(3)
lines(1:k, laplace22$chain[1:k], col = rs[1])
lines(1:k, laplace12$chain[1:k], col = rs[2])
lines(1:k, laplace02$chain[1:k], col = rs[3])
legend("bottomright", legend = c(2, 1, 0.25), fill = rs)
par(mar = c(4, 4, 2, 2))
k <- 1000
plot(NULL, xlim = c(1, k), ylim = 1.5 * range(c(laplace02$chain, laplace12$chain, laplace22$chain)))
rs <- rainbow(3)
lines(1:k, laplace22$chain[1:k], col = rs[1])
lines(1:k, laplace12$chain[1:k], col = rs[2])
lines(1:k, laplace02$chain[1:k], col = rs[3])
legend("bottomright", legend = c(2, 1, 0.25), fill = rs)
paste("The reject rate for $\sigma = 0.25$ and X(0) = 0 is:", laplace00$reject_rate)
paste("The reject rate for sigma = 0.25 and X(0) = 0 is:", laplace00$reject_rate)
laplace01$reject_rate
laplace02$reject_rate
laplace10$reject_rate
paste('The reject rate for sigma = 0.25 and X(0) = 0 is':, laplace00$reject_rate)
paste('The reject rate for sigma = 0.25 and X(0) = 0 is:', laplace00$reject_rate)
laplace01$reject_rate
laplace02$reject_rate
laplace10$reject_rate
paste('The reject rate for sigma = 0.25 and X(0) = 0 is:', laplace00$reject_rate)
paste('The reject rate for sigma = 0.25 and X(0) = 1 is:', laplace01$reject_rate)
paste('The reject rate for sigma = 0.25 and X(0) = 10 is:', laplace02$reject_rate)
paste('The reject rate for sigma = 1 and X(0) = 0 is:', laplace10$reject_rate)
paste('The reject rate for sigma = 1 and X(0) = 1 is:', laplace11$reject_rate)
paste('The reject rate for sigma = 1 and X(0) = 10 is:', laplace12$reject_rate)
paste('The reject rate for sigma = 2 and X(0) = 0 is:', laplace20$reject_rate)
paste('The reject rate for sigma = 2 and X(0) = 1 is:', laplace21$reject_rate)
paste('The reject rate for sigma = 2 and X(0) = 10 is:', laplace22$reject_rate)
B <- 5000
chain_gibbs <- matrix(0, ncol = B, nrow = 3)
for(i in 2:B) {
chain_gibbs[1, i] <- (1 - chain_gibbs[2, i - 1]) * rbeta(1, x_1 + 1, n - x_1 - x_2 + 1)
chain_gibbs[2, i] <- (1 - chain_gibbs[1, i - 1]) * rbeta(1, x_2 + 1, n - x_1 - x_2 + 1)
chain_gibbs[3, i] <- 1 - chain_gibbs[1, i] - chain_gibbs[2, i]
}
x_1 <- 806 # Congress should raise to $15/hr
x_2 <- 435 # Congress should not raise the minimum wage
x_3 <- 586 # Congress should raise to $11/hr
n <- x_1 + x_2 + x_3
B <- 5000
chain_gibbs <- matrix(0, ncol = B, nrow = 3)
for(i in 2:B) {
chain_gibbs[1, i] <- (1 - chain_gibbs[2, i - 1]) * rbeta(1, x_1 + 1, n - x_1 - x_2 + 1)
chain_gibbs[2, i] <- (1 - chain_gibbs[1, i - 1]) * rbeta(1, x_2 + 1, n - x_1 - x_2 + 1)
chain_gibbs[3, i] <- 1 - chain_gibbs[1, i] - chain_gibbs[2, i]
}
stationary <- chain_gibbs[, -(1:4000)]
cat("For theta1")
mean(stationary[1, ])
quantile(stationary[1, ], c(0.025, 0.975))
cat("For theta2")
mean(stationary[2, ])
quantile(stationary[2, ], c(0.025, 0.975))
cat("For theta3")
mean(stationary[3, ])
quantile(stationary[3, ], c(0.025, 0.975))
prob <- stationary[1, ] / stationary[2, ] > 2
cat("Probability:")
mean(prob)
B <- 5000
chain_gibbs <- matrix(0, ncol = B, nrow = 3)
for(i in 2:B) {
chain_gibbs[1, i] <- (1 - chain_gibbs[2, i - 1]) * rbeta(1, x_1 + 1, n - x_1 - x_2 + 1)
chain_gibbs[2, i] <- (1 - chain_gibbs[1, i - 1]) * rbeta(1, x_2 + 1, n - x_1 - x_2 + 1)
chain_gibbs[3, i] <- 1 - chain_gibbs[1, i] - chain_gibbs[2, i]
}
stationary <- chain_gibbs[, -(1:4000)]
cat("For theta1\n")
mean(stationary[1, ])
quantile(stationary[1, ], c(0.025, 0.975))
cat("For theta2\n")
mean(stationary[2, ])
quantile(stationary[2, ], c(0.025, 0.975))
cat("For theta3\n")
mean(stationary[3, ])
quantile(stationary[3, ], c(0.025, 0.975))
prob <- stationary[1, ] / stationary[2, ] > 2
cat("Probability:\n")
mean(prob)
x_1 <- 806 # Congress should raise to $15/hr
x_2 <- 435 # Congress should not raise the minimum wage
x_3 <- 586 # Congress should raise to $11/hr
n <- x_1 + x_2 + x_3
chain_gibbs <- matrix(0, ncol = 5000, nrow = 3)
for (i in 2:5000) {
chain_gibbs[1, i] <- (1 - chain_gibbs[2, i - 1]) * rbeta(1, x_1 + 1, n-x_1-x_2 + 1)
chain_gibbs[2, i] <- (1 - chain_gibbs[1, i]) * rbeta(1, x_2 + 1, n-x_1-x_2 + 1)
chain_gibbs[3, i] < 1 - chain_gibbs[1, i] - chain_gibbs[2, i]
}
stationary <- chain_gibbs[, -(1:3000)]
mean(stationary[1, ])
quantile(stationary[1, ], c(0.025, 0.975))
mean(stationary[2, ])
quantile(stationary[2, ], c(0.025, 0.975))
mean(stationary[3, ])
quantile(stationary[3, ], c(0.025, 0.975))
mean(stationary[3, ])
quantile(stationary[3, ], c(0.025, 0.975))
mean(stationary[1, ]/stationary[2, ] > 2)
