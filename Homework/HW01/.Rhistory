install.packages(c("tidyverse", "ggplot2"))
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
F <- function(t, theta) {
}
x <- c(2.04633020390363, 19.7162495956649, 4.13080370648129, 1.81704122764094,
1.95187369091209, 1.33550786159157, 2.51227117915184, 0.845621829601402,
0.294167520262539, 1.94874477069653, 0.668953039617229, 9.19826053515684,
0.161521415421586, 8.76538255582832, 9.05718407093848, 0.563933559592626,
5.40269171511784, 7.4842100539579, 5.70493764112286, 7.94079576949872)
likelihood <- function(theta) {
## you can refer to the variable "x" directly in this function
return(0)
}
## the "x" below is actually our theta parameter
## the curve function is a special function that needs an expression involving "x"
## The "Vectorize" function allows us to take many theta values simultaneously
curve(Vectorize(likelihood)(x), from = 0, to  = 2)
x <- c(30,290,14,88,32,56)
mean(x) # R's built in mean function
var(x) # R's built in variance function
mean_for <- function(x) {
return(0)
}
var_for <- function(x) {
return(0)
}
mean_for(x)
var_for(x)
mean_map <- function(x) {
return(0)
}
var_map <- function(x) {
return(0)
}
mean_map(x)
var_map(x)
mean_vec <- function(x) {
return(0)
}
var_vec <- function(x) {
return(0)
}
mean_vec(x)
var_vec(x)
load("tracks.rda")
knitr::kable(tracks[c(1,2,335), c("track.album.name", "track.name", "danceability", "energy", "key", "loudness", "mode")])
dim(tracks)
install.packages("rmarkdown")
install.packages("bitops")
install.packages("htmltools")
install.packages("caTools")
knitr::opts_chunk$set(echo = TRUE)
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
fx <- function(x){theta*log(2)*2^(-theta*x)}
op <- integrate(fx, 0, t)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(30, 1/4))
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(x, t = 30, theta = 1/4), from = 0, to = 30)
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
fx <- function(x){theta*log(2)*2^(-theta*x)}
op <- integrate(fx, 0, Inf)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
show(F(30, 1/4))
F <- function(t, theta) {
fx <- function(x){theta*log(2)*2^(-theta*x)}
op <- integrate(fx, 0, t)
}
show(F(30, 1/4))
F <- function(t, theta) {
integrate(theta*log(2)*2^(-theta*t), 0, Inf)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
integrate(function(t){theta*log(2)*2^(-theta*t)}, 0, Inf)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
integrate(function(t){theta*log(2)*2^(-theta*t)})
}
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
integrate(function(x){theta*log(2)*2^(-theta*x)}, 0, t)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
F <- function(t, theta) {
return integrate(function(x){theta*log(2)*2^(-theta*x)}, 0, t)
F <- function(t, theta) {
integrate(function(y){theta*log(2)*2^(-theta*y)}, 0, t)
}
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(x, theta = 1/4), from = 0, to = 30)
curve(F(x, theta = 1/4), from = 0, to = 30)
