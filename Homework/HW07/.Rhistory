covers_w <- map_dbl(diff_w, ~ .x > 0.05)
covers_t <- map_dbl(diff_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_t
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
# binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
n <- 20
m <- 20
sample_F <- rerun(1000, rnorm(20, 0, sqrt(2)))
sample_G <- rerun(1000, rnorm(20, 0, sqrt(2)))
F_t <- map(sample_F, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(sample_G, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
diff_t <- c()
diff_w <- c()
sample_F[[1]] - sample_G[[1]]
for(i in 1:1000) {
temp <- wilcox.test(x = sample_F[[i]], y = sample_G[[i]], conf.level = 0.95)$p.value
x <- sample_F[[i]] - sample_G[[i]]
temp2 <- t.test(x, conf.level = 0.95)$conf.int
diff_w <- c(diff_w, temp)
diff_t <- c(diff_t, temp2)
}
covers_w <- map_dbl(diff_w, ~ .x > 0.05)
covers_t <- map_dbl(diff_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
# binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
n <- 20
m <- 20
sample_F <- rerun(1000, rnorm(20, 0, sqrt(2)))
sample_G <- rerun(1000, rnorm(20, 0, sqrt(2)))
F_t <- map(sample_F, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(sample_G, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = sample_F[[i]], y = sample_G[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
covers_w <- map_dbl(diff_w, ~ .x > 0.05)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)$p.value
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
F_t <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(sample_G, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
Fsample - Gsample
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
F_t <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
covers_w <- map(diff_w, ~ .x < 0.05)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
F_t <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
diff_w
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
F_t <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
wilcox.test(x = Fmean, y = Gmean, conf.level = 0.95)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
F_t <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
G_t <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
covers_ft <- map_dbl(F_t, ~ .x[1] <= 0 && .x[2] >= 0)
covers_gt <- map_dbl(G_t, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers_ft), length(covers_ft), conf.level = 0.99)$conf.int
binom.test(sum(covers_gt), length(covers_gt), conf.level = 0.99)$conf.int
Fsample = rerun(1000, rt(n = 20, df = 4))
Gsample = rerun(1000, rt(n = 20, df = 4))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
(cutoff <- qt(0.95, 4))
Fsample = rerun(1000, rt(n = 20, df = 4))
Gsample = rerun(1000, rt(n = 20, df = 4))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
(cutoff <- qt(0.95, 4))
1 - pt(cutoff, 4)
Fsample = rerun(1000, rt(n = 20, df = 4))
Gsample = rerun(1000, rt(n = 20, df = 4))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Ftcovers <- map_dbl(Ft, ~ .x[1] <= 0 && .x[2] >= 0)
Gtcovers <- map_dbl(Gt, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(Ftcovers), length(Ftcovers), conf.level = 0.99)$conf.int
binom.test(sum(Gtcovers), length(Gtcovers), conf.level = 0.99)$conf.int
Fsample = rerun(1000, rt(n = 20, df = 4))
Gsample = rerun(1000, rt(n = 20, df = 4))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Ftcovers <- map_dbl(Ft, ~ .x[1] <= 0 && .x[2] >= 0)
Gtcovers <- map_dbl(Gt, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(Ftcovers), length(Ftcovers), conf.level = 0.99)$conf.int
binom.test(sum(Gtcovers), length(Gtcovers), conf.level = 0.99)$conf.int
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(Fmean, Gmean, conf.level = 0.95)
Fsample = rerun(1000, rt(n = 20, df = 4))
Gsample = rerun(1000, rt(n = 20, df = 4))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Ftcovers <- map_dbl(Ft, ~ .x[1] <= 0 && .x[2] >= 0)
Gtcovers <- map_dbl(Gt, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(Ftcovers), length(Ftcovers), conf.level = 0.99)$conf.int
binom.test(sum(Gtcovers), length(Gtcovers), conf.level = 0.99)$conf.int
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(Fmean, Gmean, conf.level = 0.95)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
Wcovers <- map_dbl(diff_w, ~ .x > 0.05)
binom.test(sum(Wcovers), length(Wcovers), conf.level = 0.99)$conf.int
Fsample = rerun(1000, rt(n = 20, df = 4))
G <- function(n, degree) {
g <- rt(n, degree)
result <- rt + 1
return(result)
}
Gsample <- rerun(1000, G(20, 4))
Fsample = rerun(1000, rt(n = 20, df = 4))
G <- function(n, degree) {
g <- rt(n, degree)
x <- c()
for(i in 1:n){
x <- c(x, 1)
}
result <- rt + x
return(result)
}
Gsample <- rerun(1000, G(20, 4))
Fsample = rerun(1000, rt(n = 20, df = 4))
rt(20, 4)
G <- function(n, degree) {
g <- rt(n, degree)
x <- c()
for(i in 1:n){
x <- c(x, 1)
}
result <- rt + x
return(result)
}
Gsample <- rerun(1000, G(20, 4))
Fsample <- rerun(1000, rt(n = 20, df = 4))
G1 <- rerun(1000, rt(n = 20, df = 4))
Gsample <- map_dbl(G1, ~.x + 1)
Fsample <- rerun(1000, rt(n = 20, df = 4))
G1 <- rerun(1000, rt(n = 20, df = 4))
y <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
Gsample <- map_dbl(G1, ~.x + y)
Fsample <- rerun(1000, rt(n = 20, df = 4))
Gsample <- rerun(1000, rt(n = 20, df = 4, ncp = 1))
Ft <- map(Fsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Gt <- map(Gsample, ~ t.test(.x, conf.level = 0.95)$conf.int)
Ftcovers <- map_dbl(Ft, ~ .x[1] <= 0 && .x[2] >= 0)
Gtcovers <- map_dbl(Gt, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(Ftcovers), length(Ftcovers), conf.level = 0.99)$conf.int
binom.test(sum(Gtcovers), length(Gtcovers), conf.level = 0.99)$conf.int
Fmean <- map_dbl(Fsample, mean)
Gmean <- map_dbl(Gsample, mean)
wilcox.test(Fmean, Gmean, conf.level = 0.95)
diff_w <- c()
for(i in 1:1000) {
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
Wcovers <- map_dbl(diff_w, ~ .x > 0.05)
binom.test(sum(Wcovers), length(Wcovers), conf.level = 0.99)$conf.int
cancer <- read.csv("cancer_cell_biopsy.csv", header = FALSE)
col_base <- c("radius",
"texture",
"perimeter",
"area",
"smoothness",
"compactness",
"concavity",
"concave_points",
"symmetry",
"fractal_dimension")
cols <- c(paste0(col_base, "_mean"), paste0(col_base, "_sd"), paste0(col_base, "_worst"))
colnames(cancer) <- c("ID", "Diagnosis", cols)
X <- cancer$radius_mean
Y <- cancer$fractal_dimension_mean
wilcox.test(x = X, y = Y, conf.level = 0.95)
radius_rank <- rank(cancer$radius_mean)
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(fractual_rank, shuffled_radius)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
knitr::opts_chunk$set(echo = TRUE)
set.seed(7792100)
radius_rank <- rank(cancer$radius_mean)
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(fractual_rank)
cor(radius_rank, shuffled_radius)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
radius_rank <- rank(cancer$radius_mean)
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_fractual <- sample(fractual_rank)
cor(radius_rank, shuffled_fractual)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
radius_rank <- rank(cancer$radius_mean)
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_fractual <- sample(fractual_rank)
cor(radius_rank, shuffled_fractual)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
X <- cancer$radius_mean
Y <- cancer$fractal_dimension_mean
wilcox.test(x = X, y = Y, conf.level = 0.95)$p.value
radius_rank <- rank(cancer$radius_mean)
length(radius_rank)
fractual_rank <- rank(cancer$fractal_dimension_mean)
length(fractual_rank)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(fractual_rank, shuffled_radius)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
betas <- seq(-0.001, 0.001, length.out = 1000)
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(fractual_rank, shuffled_radius)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
}
q <- c()
p.value <- c()
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
h_rank <- rank(h)
radius_rank <- rank(cancer$radius_mean)
observed_cor <- cor(radius_rank, h_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(h, shuffled_radius)
})
q <- c(q, quantile(cors, c(0.025, 0.975)))
p.value <- c(p.value, 2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor)))
}
mean(p.value)
q <- c()
p.value <- c()
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
h_rank <- rank(h)
radius_rank <- rank(cancer$radius_mean)
observed_cor <- cor(radius_rank, h_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(h, shuffled_radius)
})
q <- c(q, quantile(cors, c(0.025, 0.975)))
p.value <- c(p.value, 2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor)))
}
covers <- map_dbl(q, ~ .x[1] <= 0 && .x[2] >= 0)
binom.test(sum(covers), length(covers), conf.level = 0.95)$conf.int
q <- c()
p.value <- c()
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
h_rank <- rank(h)
radius_rank <- rank(cancer$radius_mean)
observed_cor <- cor(radius_rank, h_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(h, shuffled_radius)
})
q <- c(q, quantile(cors, c(0.025, 0.975)))
p.value <- c(p.value, 2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor)))
}
covers <- c()
for(i in 1:1000){
if(q[2*i-1] <= 0 && q[2*i] >= 0){
covers <- c(covers, 1)
}
else {
covers <- c(covers, 0)
}
}
binom.test(sum(covers), length(covers), conf.level = 0.95)$conf.int
sample_F <- rerun(1000, rnorm(20, 0, sqrt(2)))
sample_G <- rerun(1000, rnorm(20, 0, sqrt(2)))
diff_t <- c()
diff_w <- c()
for(i in 1:1000) {
temp <- t.test(x = sample_F[[i]], y = sample_G[[i]], conf.level = 0.95)$p.value
diff_t <- c(diff_t, temp)
temp <- wilcox.test(x = sample_F[[i]], y = sample_G[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
covers_t <- map_dbl(diff_t, ~ .x < 0.05)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rnorm(20, 0, sqrt(2)))
Gsample <- rerun(1000, rnorm(20, 1, sqrt(2)))
diff_t <- c()
diff_w <- c()
for(i in 1:1000) {
temp <- t.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_t <- c(diff_t, temp)
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
covers_t <- map_dbl(diff_t, ~ .x < 0.05)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rt(20, 4))
Gsample <- rerun(1000, rt(20, 4))
diff_t <- c()
diff_w <- c()
for(i in 1:1000) {
temp <- t.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_t <- c(diff_t, temp)
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
covers_t <- map_dbl(diff_t, ~ .x < 0.05)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
Fsample <- rerun(1000, rt(20, 4))
Gsample <- rerun(1000, rt(20, 4, 1))
diff_t <- c()
diff_w <- c()
for(i in 1:1000) {
temp <- t.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_t <- c(diff_t, temp)
temp <- wilcox.test(x = Fsample[[i]], y = Gsample[[i]], conf.level = 0.95)$p.value
diff_w <- c(diff_w, temp)
}
covers_t <- map_dbl(diff_t, ~ .x < 0.05)
covers_w <- map_dbl(diff_w, ~ .x < 0.05)
binom.test(sum(covers_t), length(covers_t), conf.level = 0.99)$conf.int
binom.test(sum(covers_w), length(covers_w), conf.level = 0.99)$conf.int
q <- c()
p.value <- c()
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
h_rank <- rank(h)
radius_rank <- rank(cancer$radius_mean)
observed_cor <- cor(radius_rank, h_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(h_rank, shuffled_radius)
})
q <- c(q, quantile(cors, c(0.025, 0.975)))
p.value <- c(p.value, 2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor)))
}
covers <- c()
for(i in 1:1000){
if(q[2*i-1] <= 0 && q[2*i] >= 0){
covers <- c(covers, 1)
}
else {
covers <- c(covers, 0)
}
}
binom.test(sum(p.value < 0.05), 1000, conf.level = 0.95)$conf.int
binom.test(sum(covers), length(covers), conf.level = 0.95)$conf.int
q <- c()
p.value <- c()
for(beta in betas){
radius <- map_dbl(cancer$radius_mean, ~ .x * beta)
fractual <- cancer$fractal_dimension_mean
h <- fractual - radius
h_rank <- rank(h)
radius_rank <- rank(cancer$radius_mean)
observed_cor <- cor(radius_rank, h_rank)
cors <- replicate(1000, {
shuffled_radius <- sample(radius_rank)
cor(h_rank, shuffled_radius)
})
q <- c(q, quantile(cors, c(0.025, 0.975)))
p.value <- c(p.value, 2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor)))
}
covers <- c()
for(i in 1:1000){
if(q[2*i-1] <= betas[i] && q[2*i] >= betas[i]){
covers <- c(covers, 1)
}
else {
covers <- c(covers, 0)
}
}
binom.test(sum(p.value < 0.05), 1000, conf.level = 0.95)$conf.int
binom.test(sum(covers), length(covers), conf.level = 0.95)$conf.int
radius_rank <- rank(cancer$radius_mean)
fractual_rank <- rank(cancer$fractal_dimension_mean)
observed_cor <- cor(radius_rank, fractual_rank)
cors <- replicate(1000, {
shuffled_fractual <- sample(fractual_rank)
cor(radius_rank, shuffled_fractual)
})
quantile(cors, c(0.025, 0.975))
2 * min(mean(cors >= observed_cor), mean(cors <= observed_cor))
X <- cancer$radius_mean
Y <- cancer$fractal_dimension_mean
wilcox.test(x = X, y = Y, conf.level = 0.95)$p.value
